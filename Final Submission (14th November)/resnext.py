# -*- coding: utf-8 -*-
"""ResNeXt.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Jpj8zGidmGNmfBSHAGuU4eOlmAXkWCv4
"""

# Commented out IPython magic to ensure Python compatibility.
# %config IPCompleter.greedy=True
# from google.colab import drive
# drive.mount('/content/drive')

from __future__ import absolute_import, division, print_function, unicode_literals
import numpy as np
from keras import backend as K
import keras
import tensorflow.compat.v1 as tf
import sys

train_data = np.loadtxt(sys.argv[1])

test_data = np.loadtxt(sys.argv[2])


train_data_x = np.reshape(train_data[:, :-2], (train_data.shape[0], 3, 32, 32))
train_data_x = np.swapaxes(train_data_x, 1, 2)
train_data_x = np.swapaxes(train_data_x, 2, 3)
train_data_y = keras.utils.to_categorical(train_data[:, -1:], 100)

DROPOUT_RATE = 0.25
CARDINALITY = 4
# ReLU before BN
# Dropouts


def transform(x, num_filters):
    x = keras.layers.Conv2D(num_filters, (1, 1), padding='SAME',
                            kernel_initializer='he_normal', bias_initializer='he_normal')(x)
    x = keras.layers.BatchNormalization()(x)
    x = keras.layers.ReLU()(x)
    x = keras.layers.Dropout(DROPOUT_RATE)(x)

    x = keras.layers.Conv2D(num_filters, (3, 3), padding='SAME',
                            kernel_initializer='he_normal', bias_initializer='he_normal')(x)
    x = keras.layers.BatchNormalization()(x)
    x = keras.layers.ReLU()(x)
    x = keras.layers.Dropout(DROPOUT_RATE)(x)

    return x


def ResidualLayerX(x, num_filters, cardinality=CARDINALITY):
    splits = list()
    inputs = x

    for i in range(cardinality):
        split = transform(x, num_filters)
        splits.append(split)

    x1 = keras.layers.Concatenate(axis=-1)(splits)

    # transition layer
    x1 = keras.layers.Conv2D(num_filters, (3, 3), padding='SAME',
                             kernel_initializer='he_normal', bias_initializer='he_normal')(x1)
    x1 = keras.layers.BatchNormalization()(x1)

    # Residual connection
    x1 = keras.layers.Add()([inputs, x1])
    x1 = keras.layers.ReLU()(x1)

    return x1


def ResNeXt():
    #  returns resnext model
    # ResNeXt 29
    inputs = keras.layers.Input(shape=(32, 32, 3))
    x = keras.layers.Conv2D(64, (3, 3), padding='SAME',
                            kernel_initializer='he_normal', bias_initializer='he_normal')(inputs)
    x = keras.layers.BatchNormalization()(x)
    x = keras.layers.ReLU()(x)
    x = keras.layers.Dropout(DROPOUT_RATE)(x)

    # ResNext Blocks
    # Stage 1
    for i in range(3):
        x = ResidualLayerX(x, 64)
    x = keras.layers.Conv2D(32, (3, 3), padding='SAME',
                            kernel_initializer='he_normal', bias_initializer='he_normal')(x)
    x = keras.layers.BatchNormalization()(x)
    x = keras.layers.ReLU()(x)
    x = keras.layers.Dropout(DROPOUT_RATE)(x)

    # Stage 2
    for i in range(3):
        x = ResidualLayerX(x, 32)
    x = keras.layers.Conv2D(16, (3, 3), padding='SAME',
                            kernel_initializer='he_normal', bias_initializer='he_normal')(x)
    x = keras.layers.BatchNormalization()(x)
    x = keras.layers.ReLU()(x)
    x = keras.layers.Dropout(DROPOUT_RATE)(x)

    # Stage 3
    for i in range(3):
        x = ResidualLayerX(x, 16)
    x = keras.layers.Conv2D(8, (3, 3), padding='SAME',
                            kernel_initializer='he_normal', bias_initializer='he_normal')(x)
    x = keras.layers.BatchNormalization()(x)
    x = keras.layers.ReLU()(x)
    x = keras.layers.Dropout(DROPOUT_RATE)(x)

    x = keras.layers.AveragePooling2D()(x)
    x = keras.layers.Flatten()(x)
    x = keras.layers.Dense(100, kernel_initializer='he_normal',
                           bias_initializer='he_normal', activation=K.softmax)(x)
    return keras.models.Model(inputs=inputs, outputs=x)


model = ResNeXt()
model.compile(optimizer='adam', loss='categorical_crossentropy',
              metrics=['accuracy'])
# checkpointer = keras.callbacks.ModelCheckpoint(filepath='/content/drive/My Drive/A3ML_data/bestweights_resnext.hdf5',
#                                monitor='val_acc', verbose=1, save_best_only=True,
#                                save_weights_only=True)
earlystopper = keras.callbacks.EarlyStopping(
    monitor='val_loss', patience=3, verbose=1)
# callbacks = [checkpointer, earlystopper]
callbacks = [earlystopper]
model.summary()

model.fit(train_data_x, train_data_y, epochs=30,
          validation_split=0.2, shuffle=True, callbacks=callbacks)

test_data_x = np.reshape(test_data[:, :-2], (test_data.shape[0], 3, 32, 32))
test_data_x = np.swapaxes(test_data_x, 1, 2)
test_data_x = np.swapaxes(test_data_x, 2, 3)

# model.load_weights('/content/drive/My Drive/A3ML_data/bestweights_resnext.hdf5')
test_data_y = np.argmax(model.predict(test_data_x), axis=1)
np.savetxt(sys.argv[3],
           test_data_y, fmt='%i')
